// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/JFLEX/Lexer.jflex

package JFLEX;

// Importaciones necesarias
import java_cup.runtime.Symbol;
import CUP.sym;

// Asignacion de reglas

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\0"+
    "\1\4\1\5\3\6\1\7\1\10\1\11\1\12\1\0"+
    "\1\13\1\0\1\14\1\15\12\16\5\0\1\17\1\0"+
    "\32\20\1\21\1\22\1\23\1\24\1\25\1\0\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\20\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\0\1\56\10\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\2\1\22\11\7\0\42\11\2\0"+
    "\1\12\1\13\2\0\1\14\1\0\46\11\3\0\1\15"+
    "\1\0\11\11\1\16\11\11\1\17\3\11\1\20\13\11"+
    "\1\21\3\11\1\0\1\22\2\0\10\11\1\23\3\11"+
    "\1\24\3\11\1\21\5\11\1\25\2\11\1\26\3\11"+
    "\1\27\1\30\1\11\1\31\5\11\2\0\7\11\1\32"+
    "\1\33\1\34\5\11\1\35\1\36\11\11\1\37\1\40"+
    "\1\11\1\41\2\0\11\11\1\42\1\11\1\43\4\11"+
    "\1\44\1\45\1\46\2\11\1\47\1\11\1\50\1\0"+
    "\1\51\3\11\1\52\1\53\1\54\3\11\1\55\2\11"+
    "\1\56\2\11\1\57\1\60\1\0\6\11\1\61\1\62"+
    "\2\11\1\0\1\63\1\11\1\64\4\11\1\65\1\0"+
    "\1\66\3\11\1\67\1\0\1\70\1\11\1\71\1\0"+
    "\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\57\0\u011a"+
    "\0\57\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb"+
    "\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb"+
    "\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33"+
    "\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab"+
    "\0\u0cda\0\u0d09\0\57\0\u05e0\0\u0d38\0\u0d67\0\57\0\u0d96"+
    "\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e"+
    "\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086"+
    "\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe"+
    "\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376"+
    "\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee"+
    "\0\u151d\0\57\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637"+
    "\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u0178\0\u1722\0\u1751\0\u1780"+
    "\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u0178\0\u18c9"+
    "\0\u18f8\0\u1927\0\u0178\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12"+
    "\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a"+
    "\0\u1bb9\0\u1be8\0\u1c17\0\57\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3"+
    "\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u0178\0\u1e1c"+
    "\0\u1e4b\0\u1e7a\0\u0178\0\u1ea9\0\u1ed8\0\u1f07\0\u0178\0\u1f36"+
    "\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u0178\0\u2021\0\u2050\0\u0178"+
    "\0\u207f\0\u20ae\0\u20dd\0\u0178\0\u0178\0\u210c\0\u0178\0\u213b"+
    "\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284\0\u22b3"+
    "\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e\0\u0178\0\u0178\0\u0178"+
    "\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489\0\u0178\0\u0178\0\u24b8"+
    "\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601\0\u2630"+
    "\0\u0178\0\u0178\0\u265f\0\u0178\0\u268e\0\u26bd\0\u26ec\0\u271b"+
    "\0\u274a\0\u2779\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u2864\0\u0178"+
    "\0\u2893\0\u0178\0\u28c2\0\u28f1\0\u2920\0\u294f\0\u0178\0\u0178"+
    "\0\u0178\0\u297e\0\u29ad\0\u0178\0\u29dc\0\u0178\0\u2a0b\0\57"+
    "\0\u2a3a\0\u2a69\0\u2a98\0\u0178\0\u0178\0\u0178\0\u2ac7\0\u2af6"+
    "\0\u2b25\0\u0178\0\u2b54\0\u2b83\0\u0178\0\u2bb2\0\u2be1\0\u0178"+
    "\0\u0178\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a"+
    "\0\u0178\0\u0178\0\u2d59\0\u2d88\0\u2db7\0\u0178\0\u2de6\0\u0178"+
    "\0\u2e15\0\u2e44\0\u2e73\0\u2ea2\0\u0178\0\u2ed1\0\u0178\0\u2f00"+
    "\0\u2f2f\0\u2f5e\0\u0178\0\u2f8d\0\u0178\0\u2fbc\0\u0178\0\u2feb"+
    "\0\u0178";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\3\2\1\11\1\2\1\7\1\12\1\2\1\13\1\2"+
    "\1\14\2\2\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\13\1\27\1\30\1\31"+
    "\1\13\1\32\1\33\1\34\1\35\1\36\1\37\4\13"+
    "\1\2\60\0\1\3\57\0\1\4\64\0\1\40\3\0"+
    "\1\41\42\0\2\6\2\0\53\6\7\42\1\0\47\42"+
    "\14\0\1\43\1\0\1\12\56\0\1\13\1\0\1\13"+
    "\4\0\31\13\26\0\1\44\47\0\1\45\1\0\1\45"+
    "\5\0\23\45\1\46\4\45\17\0\1\13\1\0\1\13"+
    "\4\0\2\13\1\47\1\13\1\50\24\13\17\0\1\13"+
    "\1\0\1\13\4\0\1\13\1\51\16\13\1\52\10\13"+
    "\17\0\1\13\1\0\1\13\4\0\11\13\1\53\3\13"+
    "\1\54\5\13\1\55\5\13\17\0\1\13\1\0\1\13"+
    "\4\0\23\13\1\56\5\13\17\0\1\13\1\0\1\13"+
    "\4\0\12\13\1\57\1\13\1\60\4\13\1\61\2\13"+
    "\1\62\4\13\17\0\1\13\1\0\1\13\4\0\1\13"+
    "\1\63\7\13\1\64\17\13\17\0\1\13\1\0\1\13"+
    "\4\0\1\13\1\65\16\13\1\66\10\13\17\0\1\13"+
    "\1\0\1\13\4\0\1\13\1\67\7\13\1\70\17\13"+
    "\17\0\1\13\1\0\1\13\4\0\14\13\1\71\14\13"+
    "\17\0\1\13\1\0\1\13\4\0\1\13\1\72\3\13"+
    "\1\73\3\13\1\74\17\13\17\0\1\13\1\0\1\13"+
    "\4\0\1\13\1\75\13\13\1\76\13\13\17\0\1\13"+
    "\1\0\1\13\4\0\16\13\1\77\12\13\17\0\1\13"+
    "\1\0\1\13\4\0\23\13\1\100\5\13\17\0\1\13"+
    "\1\0\1\13\4\0\5\13\1\101\7\13\1\102\13\13"+
    "\17\0\1\13\1\0\1\13\4\0\11\13\1\103\2\13"+
    "\1\104\14\13\17\0\1\13\1\0\1\13\4\0\20\13"+
    "\1\105\10\13\17\0\1\13\1\0\1\13\4\0\12\13"+
    "\1\106\3\13\1\107\12\13\17\0\1\13\1\0\1\13"+
    "\4\0\1\13\1\110\27\13\22\0\1\111\47\0\1\112"+
    "\53\0\1\113\65\0\1\114\40\0\22\44\1\115\2\44"+
    "\1\116\31\44\16\0\1\45\1\0\1\45\4\0\1\117"+
    "\30\45\17\0\1\45\1\0\1\45\4\0\1\117\4\45"+
    "\1\120\23\45\17\0\1\13\1\0\1\13\4\0\20\13"+
    "\1\121\10\13\17\0\1\13\1\0\1\13\4\0\24\13"+
    "\1\122\4\13\17\0\1\13\1\0\1\13\4\0\12\13"+
    "\1\123\16\13\17\0\1\13\1\0\1\13\4\0\15\13"+
    "\1\124\13\13\17\0\1\13\1\0\1\13\4\0\5\13"+
    "\1\125\23\13\17\0\1\13\1\0\1\13\4\0\13\13"+
    "\1\126\4\13\1\127\10\13\17\0\1\13\1\0\1\13"+
    "\4\0\16\13\1\130\12\13\17\0\1\13\1\0\1\13"+
    "\4\0\5\13\1\131\23\13\17\0\1\13\1\0\1\13"+
    "\4\0\6\13\1\132\22\13\17\0\1\13\1\0\1\13"+
    "\4\0\22\13\1\133\1\13\1\134\4\13\17\0\1\13"+
    "\1\0\1\13\4\0\3\13\1\135\25\13\17\0\1\13"+
    "\1\0\1\13\4\0\5\13\1\136\23\13\17\0\1\13"+
    "\1\0\1\13\4\0\12\13\1\137\16\13\17\0\1\13"+
    "\1\0\1\13\4\0\14\13\1\140\14\13\17\0\1\13"+
    "\1\0\1\13\4\0\21\13\1\141\7\13\17\0\1\13"+
    "\1\0\1\13\4\0\11\13\1\142\17\13\17\0\1\13"+
    "\1\0\1\13\4\0\4\13\1\143\24\13\17\0\1\13"+
    "\1\0\1\13\4\0\21\13\1\144\7\13\17\0\1\13"+
    "\1\0\1\13\4\0\22\13\1\145\6\13\17\0\1\13"+
    "\1\0\1\13\4\0\7\13\1\146\10\13\1\147\10\13"+
    "\17\0\1\13\1\0\1\13\4\0\12\13\1\150\16\13"+
    "\17\0\1\13\1\0\1\13\4\0\14\13\1\151\14\13"+
    "\17\0\1\13\1\0\1\13\4\0\20\13\1\152\3\13"+
    "\1\153\4\13\17\0\1\13\1\0\1\13\4\0\3\13"+
    "\1\154\25\13\17\0\1\13\1\0\1\13\4\0\5\13"+
    "\1\155\23\13\17\0\1\13\1\0\1\13\4\0\11\13"+
    "\1\156\17\13\17\0\1\13\1\0\1\13\4\0\27\13"+
    "\1\157\1\13\17\0\1\13\1\0\1\13\4\0\4\13"+
    "\1\160\24\13\17\0\1\13\1\0\1\13\4\0\7\13"+
    "\1\161\21\13\17\0\1\13\1\0\1\13\4\0\15\13"+
    "\1\162\13\13\17\0\1\13\1\0\1\13\4\0\23\13"+
    "\1\163\5\13\17\0\1\13\1\0\1\13\4\0\22\13"+
    "\1\164\6\13\17\0\1\13\1\0\1\13\4\0\1\13"+
    "\1\165\27\13\17\0\1\13\1\0\1\13\4\0\20\13"+
    "\1\166\10\13\25\0\1\167\51\0\1\170\64\0\1\171"+
    "\46\0\1\172\57\0\1\45\1\0\1\45\4\0\1\117"+
    "\17\45\1\173\10\45\17\0\1\13\1\0\1\13\4\0"+
    "\5\13\1\174\23\13\17\0\1\13\1\0\1\13\4\0"+
    "\11\13\1\175\17\13\17\0\1\13\1\0\1\13\4\0"+
    "\22\13\1\176\6\13\17\0\1\13\1\0\1\13\4\0"+
    "\13\13\1\177\15\13\17\0\1\13\1\0\1\13\4\0"+
    "\20\13\1\200\10\13\17\0\1\13\1\0\1\13\4\0"+
    "\5\13\1\201\23\13\17\0\1\13\1\0\1\13\4\0"+
    "\22\13\1\202\6\13\17\0\1\13\1\0\1\13\4\0"+
    "\11\13\1\203\17\13\17\0\1\13\1\0\1\13\4\0"+
    "\14\13\1\204\14\13\17\0\1\13\1\0\1\13\4\0"+
    "\15\13\1\205\13\13\17\0\1\13\1\0\1\13\4\0"+
    "\20\13\1\206\10\13\17\0\1\13\1\0\1\13\4\0"+
    "\11\13\1\207\11\13\1\210\5\13\17\0\1\13\1\0"+
    "\1\13\4\0\23\13\1\211\5\13\17\0\1\13\1\0"+
    "\1\13\4\0\20\13\1\212\10\13\17\0\1\13\1\0"+
    "\1\13\4\0\21\13\1\213\7\13\17\0\1\13\1\0"+
    "\1\13\4\0\20\13\1\214\10\13\17\0\1\13\1\0"+
    "\1\13\4\0\16\13\1\215\12\13\17\0\1\13\1\0"+
    "\1\13\4\0\14\13\1\216\14\13\17\0\1\13\1\0"+
    "\1\13\4\0\1\13\1\217\27\13\17\0\1\13\1\0"+
    "\1\13\4\0\22\13\1\220\6\13\17\0\1\13\1\0"+
    "\1\13\4\0\5\13\1\221\23\13\17\0\1\13\1\0"+
    "\1\13\4\0\15\13\1\222\13\13\17\0\1\13\1\0"+
    "\1\13\4\0\27\13\1\223\1\13\17\0\1\13\1\0"+
    "\1\13\4\0\3\13\1\224\25\13\17\0\1\13\1\0"+
    "\1\13\4\0\21\13\1\225\7\13\17\0\1\13\1\0"+
    "\1\13\4\0\20\13\1\226\10\13\17\0\1\13\1\0"+
    "\1\13\4\0\11\13\1\227\17\13\17\0\1\13\1\0"+
    "\1\13\4\0\10\13\1\230\20\13\17\0\1\13\1\0"+
    "\1\13\4\0\14\13\1\231\14\13\17\0\1\13\1\0"+
    "\1\13\4\0\5\13\1\232\23\13\17\0\1\13\1\0"+
    "\1\13\4\0\5\13\1\233\23\13\17\0\1\13\1\0"+
    "\1\13\4\0\15\13\1\234\13\13\17\0\1\13\1\0"+
    "\1\13\4\0\23\13\1\235\5\13\17\0\1\13\1\0"+
    "\1\13\4\0\25\13\1\236\3\13\17\0\1\13\1\0"+
    "\1\13\4\0\5\13\1\237\23\13\17\0\1\13\1\0"+
    "\1\13\4\0\11\13\1\240\17\13\17\0\1\13\1\0"+
    "\1\13\4\0\22\13\1\241\6\13\17\0\1\13\1\0"+
    "\1\13\4\0\11\13\1\242\17\13\5\0\1\243\56\0"+
    "\1\244\52\0\22\171\1\245\2\171\1\0\31\171\16\0"+
    "\1\45\1\0\1\45\4\0\1\117\1\246\27\45\17\0"+
    "\1\13\1\0\1\13\4\0\3\13\1\247\1\13\1\250"+
    "\12\13\1\251\10\13\17\0\1\13\1\0\1\13\4\0"+
    "\5\13\1\252\23\13\17\0\1\13\1\0\1\13\4\0"+
    "\1\13\1\253\27\13\17\0\1\13\1\0\1\13\4\0"+
    "\11\13\1\254\17\13\17\0\1\13\1\0\1\13\4\0"+
    "\20\13\1\255\10\13\17\0\1\13\1\0\1\13\4\0"+
    "\22\13\1\256\6\13\17\0\1\13\1\0\1\13\4\0"+
    "\1\13\1\257\27\13\17\0\1\13\1\0\1\13\4\0"+
    "\4\13\1\260\24\13\17\0\1\13\1\0\1\13\4\0"+
    "\4\13\1\261\24\13\17\0\1\13\1\0\1\13\4\0"+
    "\5\13\1\262\23\13\17\0\1\13\1\0\1\13\4\0"+
    "\1\13\1\263\27\13\17\0\1\13\1\0\1\13\4\0"+
    "\5\13\1\264\23\13\17\0\1\13\1\0\1\13\4\0"+
    "\3\13\1\265\25\13\17\0\1\13\1\0\1\13\4\0"+
    "\7\13\1\266\21\13\17\0\1\13\1\0\1\13\4\0"+
    "\5\13\1\267\23\13\17\0\1\13\1\0\1\13\4\0"+
    "\5\13\1\270\23\13\17\0\1\13\1\0\1\13\4\0"+
    "\1\13\1\271\27\13\17\0\1\13\1\0\1\13\4\0"+
    "\3\13\1\272\25\13\17\0\1\13\1\0\1\13\4\0"+
    "\15\13\1\273\13\13\17\0\1\13\1\0\1\13\4\0"+
    "\20\13\1\274\10\13\17\0\1\13\1\0\1\13\4\0"+
    "\21\13\1\275\7\13\17\0\1\13\1\0\1\13\4\0"+
    "\10\13\1\276\20\13\17\0\1\13\1\0\1\13\4\0"+
    "\22\13\1\277\6\13\17\0\1\13\1\0\1\13\4\0"+
    "\1\13\1\300\27\13\17\0\1\13\1\0\1\13\4\0"+
    "\4\13\1\301\24\13\17\0\1\13\1\0\1\13\4\0"+
    "\5\13\1\302\23\13\17\0\1\13\1\0\1\13\4\0"+
    "\21\13\1\303\7\13\17\0\1\13\1\0\1\13\4\0"+
    "\14\13\1\304\14\13\17\0\1\13\1\0\1\13\4\0"+
    "\21\13\1\305\7\13\17\0\1\13\1\0\1\13\4\0"+
    "\12\13\1\306\16\13\17\0\1\13\1\0\1\13\4\0"+
    "\5\13\1\307\23\13\17\0\1\13\1\0\1\13\4\0"+
    "\2\13\1\310\26\13\17\0\1\13\1\0\1\13\4\0"+
    "\14\13\1\311\14\13\17\0\1\13\1\0\1\13\4\0"+
    "\13\13\1\312\15\13\17\0\1\13\1\0\1\13\4\0"+
    "\20\13\1\313\10\13\17\0\1\13\1\0\1\13\4\0"+
    "\15\13\1\314\13\13\23\0\1\315\61\0\1\44\13\0"+
    "\1\171\33\0\1\45\1\0\1\45\4\0\1\117\13\45"+
    "\1\316\14\45\17\0\1\13\1\0\1\13\4\0\23\13"+
    "\1\317\5\13\17\0\1\13\1\0\1\13\4\0\13\13"+
    "\1\320\15\13\17\0\1\13\1\0\1\13\4\0\5\13"+
    "\1\321\23\13\17\0\1\13\1\0\1\13\4\0\14\13"+
    "\1\322\14\13\17\0\1\13\1\0\1\13\4\0\30\13"+
    "\1\323\17\0\1\13\1\0\1\13\4\0\21\13\1\324"+
    "\7\13\17\0\1\13\1\0\1\13\4\0\1\13\1\325"+
    "\27\13\17\0\1\13\1\0\1\13\4\0\1\13\1\326"+
    "\27\13\17\0\1\13\1\0\1\13\4\0\15\13\1\327"+
    "\13\13\17\0\1\13\1\0\1\13\4\0\5\13\1\330"+
    "\23\13\17\0\1\13\1\0\1\13\4\0\7\13\1\331"+
    "\21\13\17\0\1\13\1\0\1\13\4\0\12\13\1\332"+
    "\16\13\17\0\1\13\1\0\1\13\4\0\10\13\1\333"+
    "\20\13\17\0\1\13\1\0\1\13\4\0\20\13\1\334"+
    "\10\13\17\0\1\13\1\0\1\13\4\0\7\13\1\335"+
    "\21\13\17\0\1\13\1\0\1\13\4\0\20\13\1\336"+
    "\10\13\17\0\1\13\1\0\1\13\4\0\10\13\1\337"+
    "\20\13\17\0\1\13\1\0\1\13\4\0\20\13\1\340"+
    "\10\13\17\0\1\13\1\0\1\13\4\0\3\13\1\341"+
    "\25\13\17\0\1\13\1\0\1\13\4\0\15\13\1\342"+
    "\13\13\17\0\1\13\1\0\1\13\4\0\11\13\1\343"+
    "\17\13\17\0\1\13\1\0\1\13\4\0\1\13\1\344"+
    "\27\13\17\0\1\13\1\0\1\13\4\0\2\13\1\345"+
    "\26\13\17\0\1\13\1\0\1\13\4\0\12\13\1\346"+
    "\16\13\17\0\1\13\1\0\1\13\4\0\6\13\1\347"+
    "\22\13\17\0\1\13\1\0\1\13\4\0\1\13\1\350"+
    "\27\13\17\0\1\13\1\0\1\13\4\0\15\13\1\351"+
    "\13\13\17\0\1\13\1\0\1\13\4\0\15\13\1\352"+
    "\13\13\17\0\1\13\1\0\1\13\4\0\5\13\1\353"+
    "\23\13\17\0\1\13\1\0\1\13\4\0\21\13\1\354"+
    "\7\13\23\0\1\355\52\0\1\45\1\0\1\45\4\0"+
    "\1\117\14\45\1\356\13\45\17\0\1\13\1\0\1\13"+
    "\4\0\5\13\1\357\23\13\17\0\1\13\1\0\1\13"+
    "\4\0\16\13\1\360\12\13\17\0\1\13\1\0\1\13"+
    "\4\0\7\13\1\361\21\13\17\0\1\13\1\0\1\13"+
    "\4\0\22\13\1\362\6\13\17\0\1\13\1\0\1\13"+
    "\4\0\1\13\1\363\27\13\17\0\1\13\1\0\1\13"+
    "\4\0\22\13\1\364\6\13\17\0\1\13\1\0\1\13"+
    "\4\0\3\13\1\365\1\13\1\366\12\13\1\367\10\13"+
    "\17\0\1\13\1\0\1\13\4\0\1\13\1\370\27\13"+
    "\17\0\1\13\1\0\1\13\4\0\24\13\1\371\4\13"+
    "\17\0\1\13\1\0\1\13\4\0\1\13\1\372\27\13"+
    "\17\0\1\13\1\0\1\13\4\0\5\13\1\373\23\13"+
    "\17\0\1\13\1\0\1\13\4\0\1\13\1\374\27\13"+
    "\17\0\1\13\1\0\1\13\4\0\11\13\1\375\17\13"+
    "\17\0\1\13\1\0\1\13\4\0\1\13\1\376\27\13"+
    "\17\0\1\13\1\0\1\13\4\0\20\13\1\377\10\13"+
    "\17\0\1\13\1\0\1\13\4\0\26\13\1\u0100\2\13"+
    "\17\0\1\13\1\0\1\13\4\0\4\13\1\u0101\24\13"+
    "\17\0\1\13\1\0\1\13\4\0\23\13\1\u0102\5\13"+
    "\17\0\1\13\1\0\1\13\4\0\1\13\1\u0103\27\13"+
    "\17\0\1\13\1\0\1\13\4\0\15\13\1\u0104\13\13"+
    "\17\0\1\13\1\0\1\13\4\0\12\13\1\u0105\16\13"+
    "\17\0\1\13\1\0\1\13\4\0\5\13\1\u0106\23\13"+
    "\24\0\1\u0107\51\0\1\45\1\0\1\45\4\0\1\u0108"+
    "\30\45\17\0\1\13\1\0\1\13\4\0\14\13\1\u0109"+
    "\14\13\17\0\1\13\1\0\1\13\4\0\1\13\1\u010a"+
    "\27\13\17\0\1\13\1\0\1\13\4\0\1\13\1\u010b"+
    "\27\13\17\0\1\13\1\0\1\13\4\0\15\13\1\u010c"+
    "\13\13\17\0\1\13\1\0\1\13\4\0\20\13\1\u010d"+
    "\10\13\17\0\1\13\1\0\1\13\4\0\1\13\1\u010e"+
    "\27\13\17\0\1\13\1\0\1\13\4\0\23\13\1\u010f"+
    "\5\13\17\0\1\13\1\0\1\13\4\0\13\13\1\u0110"+
    "\15\13\17\0\1\13\1\0\1\13\4\0\5\13\1\u0111"+
    "\23\13\17\0\1\13\1\0\1\13\4\0\5\13\1\u0112"+
    "\23\13\17\0\1\13\1\0\1\13\4\0\5\13\1\u0113"+
    "\23\13\17\0\1\13\1\0\1\13\4\0\12\13\1\u0114"+
    "\16\13\17\0\1\13\1\0\1\13\4\0\1\13\1\u0115"+
    "\27\13\17\0\1\13\1\0\1\13\4\0\13\13\1\u0116"+
    "\15\13\17\0\1\13\1\0\1\13\4\0\5\13\1\u0117"+
    "\23\13\17\0\1\13\1\0\1\13\4\0\5\13\1\u0118"+
    "\23\13\17\0\1\13\1\0\1\13\4\0\12\13\1\u0119"+
    "\16\13\57\0\1\u011a\16\0\1\13\1\0\1\13\4\0"+
    "\22\13\1\u011b\6\13\17\0\1\13\1\0\1\13\4\0"+
    "\17\13\1\u011c\11\13\17\0\1\13\1\0\1\13\4\0"+
    "\12\13\1\u011d\16\13\17\0\1\13\1\0\1\13\4\0"+
    "\5\13\1\u011e\23\13\17\0\1\13\1\0\1\13\4\0"+
    "\16\13\1\u011f\12\13\17\0\1\13\1\0\1\13\4\0"+
    "\7\13\1\u0120\21\13\17\0\1\13\1\0\1\13\4\0"+
    "\14\13\1\u0121\14\13\17\0\1\13\1\0\1\13\4\0"+
    "\15\13\1\u0122\13\13\17\0\1\13\1\0\1\13\4\0"+
    "\2\13\1\u0123\26\13\17\0\1\13\1\0\1\13\4\0"+
    "\14\13\1\u0124\14\13\23\0\1\u0125\52\0\1\13\1\0"+
    "\1\13\4\0\15\13\1\u0126\13\13\17\0\1\13\1\0"+
    "\1\13\4\0\23\13\1\u0127\5\13\17\0\1\13\1\0"+
    "\1\13\4\0\15\13\1\u0128\13\13\17\0\1\13\1\0"+
    "\1\13\4\0\14\13\1\u0129\14\13\17\0\1\13\1\0"+
    "\1\13\4\0\1\13\1\u012a\27\13\17\0\1\13\1\0"+
    "\1\13\4\0\1\13\1\u012b\27\13\17\0\1\13\1\0"+
    "\1\13\4\0\11\13\1\u012c\17\13\17\0\1\13\1\0"+
    "\1\13\4\0\1\13\1\u012d\27\13\23\0\1\u012e\52\0"+
    "\1\13\1\0\1\13\4\0\5\13\1\u012f\23\13\17\0"+
    "\1\13\1\0\1\13\4\0\22\13\1\u0130\6\13\17\0"+
    "\1\13\1\0\1\13\4\0\17\13\1\u0131\11\13\17\0"+
    "\1\13\1\0\1\13\4\0\12\13\1\u0132\16\13\17\0"+
    "\1\13\1\0\1\13\4\0\15\13\1\u0133\13\13\15\0"+
    "\1\u0134\60\0\1\13\1\0\1\13\4\0\15\13\1\u0135"+
    "\13\13\17\0\1\13\1\0\1\13\4\0\23\13\1\u0136"+
    "\5\13\17\0\1\13\1\0\1\13\4\0\15\13\1\u0137"+
    "\13\13\12\0\1\u0138\63\0\1\13\1\0\1\13\4\0"+
    "\5\13\1\u0139\23\13\13\0\1\170\44\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12314];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\1\11\26\1\7\0"+
    "\42\1\2\0\1\11\1\1\2\0\1\11\1\0\46\1"+
    "\3\0\1\11\1\0\47\1\1\0\1\11\2\0\46\1"+
    "\2\0\36\1\2\0\30\1\1\0\1\11\21\1\1\0"+
    "\12\1\1\0\10\1\1\0\5\1\1\0\3\1\1\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
public int getLine() {
    return yyline;
}

public int getColumn() {
    return yycolumn;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Error léxico: " + yytext() + " en línea " + yyline + ", columna " + yycolumn);
            }
          // fall through
          case 59: break;
          case 2:
            { /* Ignorar */
            }
          // fall through
          case 60: break;
          case 3:
            { /* Saltar a la siguiente línea */
            }
          // fall through
          case 61: break;
          case 4:
            { return new Symbol(sym.QUOTE);
            }
          // fall through
          case 62: break;
          case 5:
            { /* Comentario de una línea: ignorar */
            }
          // fall through
          case 63: break;
          case 6:
            { /* Ignorar si no están dentro de una cadena */
            }
          // fall through
          case 64: break;
          case 7:
            { return new Symbol(sym.COMMA);
            }
          // fall through
          case 65: break;
          case 8:
            { return new Symbol(sym.INT_LITERAL, Integer.parseInt(yytext()));
            }
          // fall through
          case 66: break;
          case 9:
            { return new Symbol(sym.FUNCTION_OR_VARIABLE, yytext());
            }
          // fall through
          case 67: break;
          case 10:
            { return new Symbol(sym.CHAR_LITERAL, yytext().charAt(1));
            }
          // fall through
          case 68: break;
          case 11:
            { return new Symbol(sym.FLOAT_LITERAL, Float.parseFloat(yytext()));
            }
          // fall through
          case 69: break;
          case 12:
            { return new Symbol(sym.IDENTIFIER, yytext());
            }
          // fall through
          case 70: break;
          case 13:
            { /* Ignorar comentario multilínea */
            }
          // fall through
          case 71: break;
          case 14:
            { return new Symbol(sym.IF);
            }
          // fall through
          case 72: break;
          case 15:
            { return new Symbol(sym.ELSE);
            }
          // fall through
          case 73: break;
          case 16:
            { return new Symbol(sym.EQUAL);
            }
          // fall through
          case 74: break;
          case 17:
            { return new Symbol(sym.BOOL_LITERAL, Boolean.parseBoolean(yytext()));
            }
          // fall through
          case 75: break;
          case 18:
            { return new Symbol(sym.STRING_LITERAL, yytext().substring(1, yytext().length() - 1));
            }
          // fall through
          case 76: break;
          case 19:
            { return new Symbol(sym.BREAK);
            }
          // fall through
          case 77: break;
          case 20:
            { return new Symbol(sym.RETURN);
            }
          // fall through
          case 78: break;
          case 21:
            { return new Symbol(sym.MODULO);
            }
          // fall through
          case 79: break;
          case 22:
            { return new Symbol(sym.PRINT);
            }
          // fall through
          case 80: break;
          case 23:
            { return new Symbol(sym.INCREMENT);
            }
          // fall through
          case 81: break;
          case 24:
            { return new Symbol(sym.DIVIDE);
            }
          // fall through
          case 82: break;
          case 25:
            { return new Symbol(sym.COLON);
            }
          // fall through
          case 83: break;
          case 26:
            { return new Symbol(sym.STRING);
            }
          // fall through
          case 84: break;
          case 27:
            { return new Symbol(sym.CHAR);
            }
          // fall through
          case 85: break;
          case 28:
            { return new Symbol(sym.FOR);
            }
          // fall through
          case 86: break;
          case 29:
            { return new Symbol(sym.OR);
            }
          // fall through
          case 87: break;
          case 30:
            { return new Symbol(sym.DECREMENT);
            }
          // fall through
          case 88: break;
          case 31:
            { return new Symbol(sym.BOOL);
            }
          // fall through
          case 89: break;
          case 32:
            { return new Symbol(sym.DEFAULT);
            }
          // fall through
          case 90: break;
          case 33:
            { return new Symbol(sym.SWITCH);
            }
          // fall through
          case 91: break;
          case 34:
            { return new Symbol(sym.ASSIGN);
            }
          // fall through
          case 92: break;
          case 35:
            { return new Symbol(sym.READ);
            }
          // fall through
          case 93: break;
          case 36:
            { return new Symbol(sym.AND);
            }
          // fall through
          case 94: break;
          case 37:
            { return new Symbol(sym.GREATER_THAN);
            }
          // fall through
          case 95: break;
          case 38:
            { return new Symbol(sym.PLUS);
            }
          // fall through
          case 96: break;
          case 39:
            { return new Symbol(sym.INTEGER);
            }
          // fall through
          case 97: break;
          case 40:
            { return new Symbol(sym.GREATER_EQUAL);
            }
          // fall through
          case 98: break;
          case 41:
            { return new Symbol(sym.MAIN);
            }
          // fall through
          case 99: break;
          case 42:
            { return new Symbol(sym.POWER);
            }
          // fall through
          case 100: break;
          case 43:
            { return new Symbol(sym.NOT);
            }
          // fall through
          case 101: break;
          case 44:
            { return new Symbol(sym.FLOAT);
            }
          // fall through
          case 102: break;
          case 45:
            { return new Symbol(sym.WHILE);
            }
          // fall through
          case 103: break;
          case 46:
            { return new Symbol(sym.CASE);
            }
          // fall through
          case 104: break;
          case 47:
            { return new Symbol(sym.NOT_EQUAL);
            }
          // fall through
          case 105: break;
          case 48:
            { return new Symbol(sym.LESS_THAN);
            }
          // fall through
          case 106: break;
          case 49:
            { return new Symbol(sym.LESS_EQUAL);
            }
          // fall through
          case 107: break;
          case 50:
            { return new Symbol(sym.END_STATEMENT);
            }
          // fall through
          case 108: break;
          case 51:
            { return new Symbol(sym.OPEN_BLOCK);
            }
          // fall through
          case 109: break;
          case 52:
            { return new Symbol(sym.OPEN_PAREN);
            }
          // fall through
          case 110: break;
          case 53:
            { return new Symbol(sym.MULTIPLY);
            }
          // fall through
          case 111: break;
          case 54:
            { return new Symbol(sym.OPEN_BRACKET);
            }
          // fall through
          case 112: break;
          case 55:
            { return new Symbol(sym.MINUS);
            }
          // fall through
          case 113: break;
          case 56:
            { return new Symbol(sym.CLOSE_BLOCK);
            }
          // fall through
          case 114: break;
          case 57:
            { return new Symbol(sym.CLOSE_PAREN);
            }
          // fall through
          case 115: break;
          case 58:
            { return new Symbol(sym.CLOSE_BRACKET);
            }
          // fall through
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
