package CUP;

import java_cup.runtime.Symbol;

// Declaración de tokens
terminal INTEGER, FLOAT, BOOL, CHAR, STRING;
terminal TRUE, FALSE;
terminal OPEN_BLOCK, CLOSE_BLOCK, OPEN_BRACKET, CLOSE_BRACKET, OPEN_PAREN, CLOSE_PAREN;
terminal ASSIGN, END_STATEMENT;
terminal PLUS, MINUS, MULTIPLY, DIVIDE, MODULO, POWER;
terminal INCREMENT, DECREMENT;
terminal LESS_THAN, LESS_EQUAL, GREATER_THAN, GREATER_EQUAL, EQUAL, NOT_EQUAL;
terminal AND, OR, NOT;
terminal IF, ELSE, WHILE, FOR, SWITCH, CASE, DEFAULT, BREAK, RETURN, COLON;
terminal PRINT, READ;
terminal IDENTIFIER, INT_LITERAL, FLOAT_LITERAL, BOOL_LITERAL, CHAR_LITERAL, STRING_LITERAL;
terminal QUOTE, COMMA, MAIN;
terminal FUNCTION_OR_VARIABLE;

// Declaración de no terminales
non terminal program;
non terminal main_proc;
non terminal statement_list;
non terminal statement;
non terminal expression;
non terminal parameter_list;
non terminal parameter;
non terminal miPrograma, funciones, funcion, encabezadoFunc, main, parametros, paramAux, parametro;
non terminal bloque, tipos, sentencias, sentencia;
non terminal creacion, creacionAsign, asignacion, literales;
non terminal arreglo, accesoArreglo, asignacionArreglo;
non terminal llamadaFuncion, argumentos, estructuraControl, io;
non terminal ifElse, while, for, switch, casos, caso;
non terminal expresion, termino;
non terminal operadorAritmetico, operadorRelacional, operadorLogico, operadorUnario;
non terminal booleano;

// Precedencia y asociatividad para operadores
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE, MODULO;
precedence left POWER;

// Reglas de gramática

// Símbolo inicial
start with miPrograma;

// Reglas de gramática
miPrograma ::= funciones main;

funciones ::= funcion
           | funciones funcion;

funcion ::= encabezadoFunc bloque;

encabezadoFunc ::= tipos IDENTIFIER parametros;

main ::= INTEGER MAIN OPEN_PAREN CLOSE_PAREN bloque;

parametros ::= OPEN_PAREN CLOSE_PAREN
             | OPEN_PAREN paramAux CLOSE_PAREN;

paramAux ::= parametro
           | paramAux COMMA parametro;

parametro ::= tipos IDENTIFIER;

bloque ::= OPEN_BLOCK sentencias CLOSE_BLOCK;

tipos ::= INTEGER
       | FLOAT
       | BOOL
       | CHAR
       | STRING;

sentencias ::= sentencia
             | sentencias sentencia;

sentencia ::= creacion
            | creacionAsign
            | asignacion
            | llamadaFuncion
            | estructuraControl
            | io;

creacion ::= tipos IDENTIFIER END_STATEMENT;

creacionAsign ::= tipos IDENTIFIER ASSIGN literales END_STATEMENT;

asignacion ::= IDENTIFIER ASSIGN expresion END_STATEMENT;

literales ::= INT_LITERAL
            | FLOAT_LITERAL
            | booleano
            | STRING_LITERAL
            | CHAR_LITERAL;

arreglo ::= tipos IDENTIFIER OPEN_BRACKET INT_LITERAL CLOSE_BRACKET END_STATEMENT;

accesoArreglo ::= IDENTIFIER OPEN_BRACKET INT_LITERAL CLOSE_BRACKET;

asignacionArreglo ::= accesoArreglo ASSIGN expresion END_STATEMENT;

llamadaFuncion ::= IDENTIFIER OPEN_PAREN argumentos CLOSE_PAREN END_STATEMENT;

argumentos ::= expresion
             | argumentos COMMA expresion;

estructuraControl ::= ifElse
                    | while
                    | for
                    | switch;

ifElse ::= IF OPEN_PAREN expresion CLOSE_PAREN bloque ELSE bloque;

while ::= WHILE OPEN_PAREN expresion CLOSE_PAREN bloque;

for ::= FOR OPEN_PAREN asignacion COMMA expresion COMMA asignacion CLOSE_PAREN bloque;

switch ::= SWITCH OPEN_PAREN expresion CLOSE_PAREN OPEN_BLOCK casos CLOSE_BLOCK;

casos ::= caso
        | casos caso;

caso ::= CASE expresion COLON sentencias
       | COLON sentencias DEFAULT;

io ::= PRINT OPEN_PAREN expresion CLOSE_PAREN END_STATEMENT
    | READ OPEN_PAREN IDENTIFIER CLOSE_PAREN END_STATEMENT;

expresion ::= termino
            | expresion operadorAritmetico termino
            | expresion operadorRelacional termino
            | expresion operadorLogico termino
            | operadorUnario termino
            | termino operadorUnario;

operadorAritmetico ::= PLUS | MINUS | DIVIDE | MULTIPLY | MODULO | POWER;
operadorRelacional ::= LESS_THAN | LESS_EQUAL | GREATER_THAN | GREATER_EQUAL | EQUAL | NOT_EQUAL;
operadorLogico ::= AND | OR | NOT;
operadorUnario ::= INCREMENT | DECREMENT ;

termino ::= IDENTIFIER
          | literales
          | llamadaFuncion
          | accesoArreglo
          | OPEN_PAREN expresion CLOSE_PAREN;

booleano ::= TRUE | FALSE;